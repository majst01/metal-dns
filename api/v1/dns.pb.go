// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: v1/dns.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordType int32

const (
	RecordType_A     RecordType = 0
	RecordType_AAAA  RecordType = 2
	RecordType_CNAME RecordType = 3
	RecordType_MX    RecordType = 4
	RecordType_NS    RecordType = 5
	RecordType_TXT   RecordType = 6
	RecordType_RP    RecordType = 7
	RecordType_SOA   RecordType = 8
	RecordType_HINFO RecordType = 9
	RecordType_SRV   RecordType = 10
	RecordType_DNANE RecordType = 11
	RecordType_TLSA  RecordType = 12
	RecordType_DS    RecordType = 13
	RecordType_CAA   RecordType = 14
	RecordType_ANY   RecordType = 15
)

// Enum value maps for RecordType.
var (
	RecordType_name = map[int32]string{
		0:  "A",
		2:  "AAAA",
		3:  "CNAME",
		4:  "MX",
		5:  "NS",
		6:  "TXT",
		7:  "RP",
		8:  "SOA",
		9:  "HINFO",
		10: "SRV",
		11: "DNANE",
		12: "TLSA",
		13: "DS",
		14: "CAA",
		15: "ANY",
	}
	RecordType_value = map[string]int32{
		"A":     0,
		"AAAA":  2,
		"CNAME": 3,
		"MX":    4,
		"NS":    5,
		"TXT":   6,
		"RP":    7,
		"SOA":   8,
		"HINFO": 9,
		"SRV":   10,
		"DNANE": 11,
		"TLSA":  12,
		"DS":    13,
		"CAA":   14,
		"ANY":   15,
	}
)

func (x RecordType) Enum() *RecordType {
	p := new(RecordType)
	*p = x
	return p
}

func (x RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_dns_proto_enumTypes[0].Descriptor()
}

func (RecordType) Type() protoreflect.EnumType {
	return &file_v1_dns_proto_enumTypes[0]
}

func (x RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordType.Descriptor instead.
func (RecordType) EnumDescriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{0}
}

type Domain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ttl      uint32 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	ZoneFile string `protobuf:"bytes,3,opt,name=zone_file,json=zoneFile,proto3" json:"zone_file,omitempty"`
}

func (x *Domain) Reset() {
	*x = Domain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Domain) ProtoMessage() {}

func (x *Domain) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Domain.ProtoReflect.Descriptor instead.
func (*Domain) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{0}
}

func (x *Domain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Domain) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *Domain) GetZoneFile() string {
	if x != nil {
		return x.ZoneFile
	}
	return ""
}

type DomainsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DomainsListRequest) Reset() {
	*x = DomainsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainsListRequest) ProtoMessage() {}

func (x *DomainsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainsListRequest.ProtoReflect.Descriptor instead.
func (*DomainsListRequest) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{1}
}

type DomainGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DomainGetRequest) Reset() {
	*x = DomainGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainGetRequest) ProtoMessage() {}

func (x *DomainGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainGetRequest.ProtoReflect.Descriptor instead.
func (*DomainGetRequest) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{2}
}

func (x *DomainGetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DomainCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nameservers []string `protobuf:"bytes,2,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
}

func (x *DomainCreateRequest) Reset() {
	*x = DomainCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainCreateRequest) ProtoMessage() {}

func (x *DomainCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainCreateRequest.ProtoReflect.Descriptor instead.
func (*DomainCreateRequest) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{3}
}

func (x *DomainCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainCreateRequest) GetNameservers() []string {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

type DomainDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DomainDeleteRequest) Reset() {
	*x = DomainDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDeleteRequest) ProtoMessage() {}

func (x *DomainDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDeleteRequest.ProtoReflect.Descriptor instead.
func (*DomainDeleteRequest) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{4}
}

func (x *DomainDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domains []*Domain `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
}

func (x *DomainsResponse) Reset() {
	*x = DomainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainsResponse) ProtoMessage() {}

func (x *DomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainsResponse.ProtoReflect.Descriptor instead.
func (*DomainsResponse) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{5}
}

func (x *DomainsResponse) GetDomains() []*Domain {
	if x != nil {
		return x.Domains
	}
	return nil
}

type DomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain *Domain `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *DomainResponse) Reset() {
	*x = DomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainResponse) ProtoMessage() {}

func (x *DomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainResponse.ProtoReflect.Descriptor instead.
func (*DomainResponse) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{6}
}

func (x *DomainResponse) GetDomain() *Domain {
	if x != nil {
		return x.Domain
	}
	return nil
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     RecordType `protobuf:"varint,1,opt,name=type,proto3,enum=v1.RecordType" json:"type,omitempty"`
	Name     string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data     string     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Priority int32      `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	Port     uint32     `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Ttl      uint32     `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Weight   int32      `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	Flags    int32      `protobuf:"varint,8,opt,name=flags,proto3" json:"flags,omitempty"`
	Tag      string     `protobuf:"bytes,9,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{7}
}

func (x *Record) GetType() RecordType {
	if x != nil {
		return x.Type
	}
	return RecordType_A
}

func (x *Record) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Record) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Record) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Record) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Record) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *Record) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Record) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Record) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type RecordsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string                  `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Type   RecordType              `protobuf:"varint,2,opt,name=type,proto3,enum=v1.RecordType" json:"type,omitempty"`
	Name   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RecordsListRequest) Reset() {
	*x = RecordsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsListRequest) ProtoMessage() {}

func (x *RecordsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsListRequest.ProtoReflect.Descriptor instead.
func (*RecordsListRequest) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{8}
}

func (x *RecordsListRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RecordsListRequest) GetType() RecordType {
	if x != nil {
		return x.Type
	}
	return RecordType_A
}

func (x *RecordsListRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type RecordGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *RecordGetRequest) Reset() {
	*x = RecordGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordGetRequest) ProtoMessage() {}

func (x *RecordGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordGetRequest.ProtoReflect.Descriptor instead.
func (*RecordGetRequest) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{9}
}

func (x *RecordGetRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type RecordCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     RecordType `protobuf:"varint,1,opt,name=type,proto3,enum=v1.RecordType" json:"type,omitempty"`
	Name     string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data     string     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Priority int32      `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	Port     uint32     `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Ttl      uint32     `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Weight   int32      `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	Flags    int32      `protobuf:"varint,8,opt,name=flags,proto3" json:"flags,omitempty"`
	Tag      string     `protobuf:"bytes,9,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *RecordCreateRequest) Reset() {
	*x = RecordCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordCreateRequest) ProtoMessage() {}

func (x *RecordCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordCreateRequest.ProtoReflect.Descriptor instead.
func (*RecordCreateRequest) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{10}
}

func (x *RecordCreateRequest) GetType() RecordType {
	if x != nil {
		return x.Type
	}
	return RecordType_A
}

func (x *RecordCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecordCreateRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *RecordCreateRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *RecordCreateRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RecordCreateRequest) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *RecordCreateRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *RecordCreateRequest) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RecordCreateRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type RecordUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string     `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Type     RecordType `protobuf:"varint,2,opt,name=type,proto3,enum=v1.RecordType" json:"type,omitempty"`
	Name     string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Data     string     `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Priority int32      `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	Port     uint32     `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	Ttl      uint32     `protobuf:"varint,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Weight   int32      `protobuf:"varint,8,opt,name=weight,proto3" json:"weight,omitempty"`
	Flags    int32      `protobuf:"varint,9,opt,name=flags,proto3" json:"flags,omitempty"`
	Tag      string     `protobuf:"bytes,10,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *RecordUpdateRequest) Reset() {
	*x = RecordUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordUpdateRequest) ProtoMessage() {}

func (x *RecordUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordUpdateRequest.ProtoReflect.Descriptor instead.
func (*RecordUpdateRequest) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{11}
}

func (x *RecordUpdateRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RecordUpdateRequest) GetType() RecordType {
	if x != nil {
		return x.Type
	}
	return RecordType_A
}

func (x *RecordUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecordUpdateRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *RecordUpdateRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *RecordUpdateRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RecordUpdateRequest) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *RecordUpdateRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *RecordUpdateRequest) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RecordUpdateRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type RecordDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type RecordType `protobuf:"varint,1,opt,name=type,proto3,enum=v1.RecordType" json:"type,omitempty"`
	Name string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data string     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RecordDeleteRequest) Reset() {
	*x = RecordDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDeleteRequest) ProtoMessage() {}

func (x *RecordDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDeleteRequest.ProtoReflect.Descriptor instead.
func (*RecordDeleteRequest) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{12}
}

func (x *RecordDeleteRequest) GetType() RecordType {
	if x != nil {
		return x.Type
	}
	return RecordType_A
}

func (x *RecordDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecordDeleteRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *RecordsResponse) Reset() {
	*x = RecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsResponse) ProtoMessage() {}

func (x *RecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsResponse.ProtoReflect.Descriptor instead.
func (*RecordsResponse) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{13}
}

func (x *RecordsResponse) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

type RecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *RecordResponse) Reset() {
	*x = RecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_dns_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordResponse) ProtoMessage() {}

func (x *RecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_dns_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordResponse.ProtoReflect.Descriptor instead.
func (*RecordResponse) Descriptor() ([]byte, []int) {
	return file_v1_dns_proto_rawDescGZIP(), []int{14}
}

func (x *RecordResponse) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

var File_v1_dns_proto protoreflect.FileDescriptor

var file_v1_dns_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x76, 0x31, 0x2f, 0x64, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74,
	0x74, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22,
	0x14, 0x0a, 0x12, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x10, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a,
	0x13, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x29, 0x0a, 0x13, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x0f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x34,
	0x0a, 0x0e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x22, 0xd6, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x74, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x82, 0x01,
	0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x13, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x22, 0xf7, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x61, 0x0a, 0x13, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x37, 0x0a,
	0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2a, 0x95, 0x01, 0x0a,
	0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x41,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x41, 0x41, 0x41, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x58, 0x10, 0x04, 0x12,
	0x06, 0x0a, 0x02, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x58, 0x54, 0x10, 0x06,
	0x12, 0x06, 0x0a, 0x02, 0x52, 0x50, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4f, 0x41, 0x10,
	0x08, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x52, 0x56, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x4e, 0x41, 0x4e, 0x45, 0x10, 0x0b,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x4c, 0x53, 0x41, 0x10, 0x0c, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x53,
	0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x41, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x4e, 0x59, 0x10, 0x0f, 0x32, 0xe3, 0x01, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x17, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9a, 0x02, 0x0a, 0x0d, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_dns_proto_rawDescOnce sync.Once
	file_v1_dns_proto_rawDescData = file_v1_dns_proto_rawDesc
)

func file_v1_dns_proto_rawDescGZIP() []byte {
	file_v1_dns_proto_rawDescOnce.Do(func() {
		file_v1_dns_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_dns_proto_rawDescData)
	})
	return file_v1_dns_proto_rawDescData
}

var file_v1_dns_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_dns_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_v1_dns_proto_goTypes = []interface{}{
	(RecordType)(0),                // 0: v1.RecordType
	(*Domain)(nil),                 // 1: v1.Domain
	(*DomainsListRequest)(nil),     // 2: v1.DomainsListRequest
	(*DomainGetRequest)(nil),       // 3: v1.DomainGetRequest
	(*DomainCreateRequest)(nil),    // 4: v1.DomainCreateRequest
	(*DomainDeleteRequest)(nil),    // 5: v1.DomainDeleteRequest
	(*DomainsResponse)(nil),        // 6: v1.DomainsResponse
	(*DomainResponse)(nil),         // 7: v1.DomainResponse
	(*Record)(nil),                 // 8: v1.Record
	(*RecordsListRequest)(nil),     // 9: v1.RecordsListRequest
	(*RecordGetRequest)(nil),       // 10: v1.RecordGetRequest
	(*RecordCreateRequest)(nil),    // 11: v1.RecordCreateRequest
	(*RecordUpdateRequest)(nil),    // 12: v1.RecordUpdateRequest
	(*RecordDeleteRequest)(nil),    // 13: v1.RecordDeleteRequest
	(*RecordsResponse)(nil),        // 14: v1.RecordsResponse
	(*RecordResponse)(nil),         // 15: v1.RecordResponse
	(*wrapperspb.StringValue)(nil), // 16: google.protobuf.StringValue
}
var file_v1_dns_proto_depIdxs = []int32{
	1,  // 0: v1.DomainsResponse.domains:type_name -> v1.Domain
	1,  // 1: v1.DomainResponse.domain:type_name -> v1.Domain
	0,  // 2: v1.Record.type:type_name -> v1.RecordType
	0,  // 3: v1.RecordsListRequest.type:type_name -> v1.RecordType
	16, // 4: v1.RecordsListRequest.name:type_name -> google.protobuf.StringValue
	0,  // 5: v1.RecordCreateRequest.type:type_name -> v1.RecordType
	0,  // 6: v1.RecordUpdateRequest.type:type_name -> v1.RecordType
	0,  // 7: v1.RecordDeleteRequest.type:type_name -> v1.RecordType
	8,  // 8: v1.RecordsResponse.records:type_name -> v1.Record
	8,  // 9: v1.RecordResponse.record:type_name -> v1.Record
	2,  // 10: v1.DomainService.List:input_type -> v1.DomainsListRequest
	3,  // 11: v1.DomainService.Get:input_type -> v1.DomainGetRequest
	4,  // 12: v1.DomainService.Create:input_type -> v1.DomainCreateRequest
	5,  // 13: v1.DomainService.Delete:input_type -> v1.DomainDeleteRequest
	9,  // 14: v1.RecordService.List:input_type -> v1.RecordsListRequest
	10, // 15: v1.RecordService.Get:input_type -> v1.RecordGetRequest
	13, // 16: v1.RecordService.Delete:input_type -> v1.RecordDeleteRequest
	12, // 17: v1.RecordService.Update:input_type -> v1.RecordUpdateRequest
	11, // 18: v1.RecordService.Create:input_type -> v1.RecordCreateRequest
	6,  // 19: v1.DomainService.List:output_type -> v1.DomainsResponse
	7,  // 20: v1.DomainService.Get:output_type -> v1.DomainResponse
	7,  // 21: v1.DomainService.Create:output_type -> v1.DomainResponse
	7,  // 22: v1.DomainService.Delete:output_type -> v1.DomainResponse
	14, // 23: v1.RecordService.List:output_type -> v1.RecordsResponse
	15, // 24: v1.RecordService.Get:output_type -> v1.RecordResponse
	15, // 25: v1.RecordService.Delete:output_type -> v1.RecordResponse
	15, // 26: v1.RecordService.Update:output_type -> v1.RecordResponse
	15, // 27: v1.RecordService.Create:output_type -> v1.RecordResponse
	19, // [19:28] is the sub-list for method output_type
	10, // [10:19] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_v1_dns_proto_init() }
func file_v1_dns_proto_init() {
	if File_v1_dns_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_dns_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Domain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_dns_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_dns_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_dns_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_dns_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_dns_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_dns_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_dns_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_dns_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_dns_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_dns_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_dns_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_dns_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_dns_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_dns_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_dns_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_v1_dns_proto_goTypes,
		DependencyIndexes: file_v1_dns_proto_depIdxs,
		EnumInfos:         file_v1_dns_proto_enumTypes,
		MessageInfos:      file_v1_dns_proto_msgTypes,
	}.Build()
	File_v1_dns_proto = out.File
	file_v1_dns_proto_rawDesc = nil
	file_v1_dns_proto_goTypes = nil
	file_v1_dns_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DomainServiceClient is the client API for DomainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DomainServiceClient interface {
	List(ctx context.Context, in *DomainsListRequest, opts ...grpc.CallOption) (*DomainsResponse, error)
	Get(ctx context.Context, in *DomainGetRequest, opts ...grpc.CallOption) (*DomainResponse, error)
	Create(ctx context.Context, in *DomainCreateRequest, opts ...grpc.CallOption) (*DomainResponse, error)
	Delete(ctx context.Context, in *DomainDeleteRequest, opts ...grpc.CallOption) (*DomainResponse, error)
}

type domainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainServiceClient(cc grpc.ClientConnInterface) DomainServiceClient {
	return &domainServiceClient{cc}
}

func (c *domainServiceClient) List(ctx context.Context, in *DomainsListRequest, opts ...grpc.CallOption) (*DomainsResponse, error) {
	out := new(DomainsResponse)
	err := c.cc.Invoke(ctx, "/v1.DomainService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) Get(ctx context.Context, in *DomainGetRequest, opts ...grpc.CallOption) (*DomainResponse, error) {
	out := new(DomainResponse)
	err := c.cc.Invoke(ctx, "/v1.DomainService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) Create(ctx context.Context, in *DomainCreateRequest, opts ...grpc.CallOption) (*DomainResponse, error) {
	out := new(DomainResponse)
	err := c.cc.Invoke(ctx, "/v1.DomainService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) Delete(ctx context.Context, in *DomainDeleteRequest, opts ...grpc.CallOption) (*DomainResponse, error) {
	out := new(DomainResponse)
	err := c.cc.Invoke(ctx, "/v1.DomainService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainServiceServer is the server API for DomainService service.
type DomainServiceServer interface {
	List(context.Context, *DomainsListRequest) (*DomainsResponse, error)
	Get(context.Context, *DomainGetRequest) (*DomainResponse, error)
	Create(context.Context, *DomainCreateRequest) (*DomainResponse, error)
	Delete(context.Context, *DomainDeleteRequest) (*DomainResponse, error)
}

// UnimplementedDomainServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDomainServiceServer struct {
}

func (*UnimplementedDomainServiceServer) List(context.Context, *DomainsListRequest) (*DomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedDomainServiceServer) Get(context.Context, *DomainGetRequest) (*DomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDomainServiceServer) Create(context.Context, *DomainCreateRequest) (*DomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedDomainServiceServer) Delete(context.Context, *DomainDeleteRequest) (*DomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterDomainServiceServer(s *grpc.Server, srv DomainServiceServer) {
	s.RegisterService(&_DomainService_serviceDesc, srv)
}

func _DomainService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DomainService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServiceServer).List(ctx, req.(*DomainsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DomainService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServiceServer).Get(ctx, req.(*DomainGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DomainService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServiceServer).Create(ctx, req.(*DomainCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DomainService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServiceServer).Delete(ctx, req.(*DomainDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DomainService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DomainService",
	HandlerType: (*DomainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _DomainService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DomainService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DomainService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DomainService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/dns.proto",
}

// RecordServiceClient is the client API for RecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecordServiceClient interface {
	List(ctx context.Context, in *RecordsListRequest, opts ...grpc.CallOption) (*RecordsResponse, error)
	Get(ctx context.Context, in *RecordGetRequest, opts ...grpc.CallOption) (*RecordResponse, error)
	Delete(ctx context.Context, in *RecordDeleteRequest, opts ...grpc.CallOption) (*RecordResponse, error)
	Update(ctx context.Context, in *RecordUpdateRequest, opts ...grpc.CallOption) (*RecordResponse, error)
	Create(ctx context.Context, in *RecordCreateRequest, opts ...grpc.CallOption) (*RecordResponse, error)
}

type recordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordServiceClient(cc grpc.ClientConnInterface) RecordServiceClient {
	return &recordServiceClient{cc}
}

func (c *recordServiceClient) List(ctx context.Context, in *RecordsListRequest, opts ...grpc.CallOption) (*RecordsResponse, error) {
	out := new(RecordsResponse)
	err := c.cc.Invoke(ctx, "/v1.RecordService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) Get(ctx context.Context, in *RecordGetRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/v1.RecordService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) Delete(ctx context.Context, in *RecordDeleteRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/v1.RecordService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) Update(ctx context.Context, in *RecordUpdateRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/v1.RecordService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) Create(ctx context.Context, in *RecordCreateRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/v1.RecordService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordServiceServer is the server API for RecordService service.
type RecordServiceServer interface {
	List(context.Context, *RecordsListRequest) (*RecordsResponse, error)
	Get(context.Context, *RecordGetRequest) (*RecordResponse, error)
	Delete(context.Context, *RecordDeleteRequest) (*RecordResponse, error)
	Update(context.Context, *RecordUpdateRequest) (*RecordResponse, error)
	Create(context.Context, *RecordCreateRequest) (*RecordResponse, error)
}

// UnimplementedRecordServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRecordServiceServer struct {
}

func (*UnimplementedRecordServiceServer) List(context.Context, *RecordsListRequest) (*RecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedRecordServiceServer) Get(context.Context, *RecordGetRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRecordServiceServer) Delete(context.Context, *RecordDeleteRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedRecordServiceServer) Update(context.Context, *RecordUpdateRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedRecordServiceServer) Create(context.Context, *RecordCreateRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}

func RegisterRecordServiceServer(s *grpc.Server, srv RecordServiceServer) {
	s.RegisterService(&_RecordService_serviceDesc, srv)
}

func _RecordService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RecordService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).List(ctx, req.(*RecordsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RecordService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).Get(ctx, req.(*RecordGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RecordService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).Delete(ctx, req.(*RecordDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RecordService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).Update(ctx, req.(*RecordUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RecordService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).Create(ctx, req.(*RecordCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RecordService",
	HandlerType: (*RecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _RecordService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RecordService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RecordService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RecordService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RecordService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/dns.proto",
}
