// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/dns.proto

package apiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/majst01/metal-dns/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TokenServiceName is the fully-qualified name of the TokenService service.
	TokenServiceName = "api.v1.TokenService"
	// DomainServiceName is the fully-qualified name of the DomainService service.
	DomainServiceName = "api.v1.DomainService"
	// RecordServiceName is the fully-qualified name of the RecordService service.
	RecordServiceName = "api.v1.RecordService"
)

// TokenServiceClient is a client for the api.v1.TokenService service.
type TokenServiceClient interface {
	Create(context.Context, *connect_go.Request[v1.TokenServiceCreateRequest]) (*connect_go.Response[v1.TokenServiceCreateResponse], error)
}

// NewTokenServiceClient constructs a client for the api.v1.TokenService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTokenServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TokenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tokenServiceClient{
		create: connect_go.NewClient[v1.TokenServiceCreateRequest, v1.TokenServiceCreateResponse](
			httpClient,
			baseURL+"/api.v1.TokenService/Create",
			opts...,
		),
	}
}

// tokenServiceClient implements TokenServiceClient.
type tokenServiceClient struct {
	create *connect_go.Client[v1.TokenServiceCreateRequest, v1.TokenServiceCreateResponse]
}

// Create calls api.v1.TokenService.Create.
func (c *tokenServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.TokenServiceCreateRequest]) (*connect_go.Response[v1.TokenServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// TokenServiceHandler is an implementation of the api.v1.TokenService service.
type TokenServiceHandler interface {
	Create(context.Context, *connect_go.Request[v1.TokenServiceCreateRequest]) (*connect_go.Response[v1.TokenServiceCreateResponse], error)
}

// NewTokenServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTokenServiceHandler(svc TokenServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.v1.TokenService/Create", connect_go.NewUnaryHandler(
		"/api.v1.TokenService/Create",
		svc.Create,
		opts...,
	))
	return "/api.v1.TokenService/", mux
}

// UnimplementedTokenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTokenServiceHandler struct{}

func (UnimplementedTokenServiceHandler) Create(context.Context, *connect_go.Request[v1.TokenServiceCreateRequest]) (*connect_go.Response[v1.TokenServiceCreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.TokenService.Create is not implemented"))
}

// DomainServiceClient is a client for the api.v1.DomainService service.
type DomainServiceClient interface {
	List(context.Context, *connect_go.Request[v1.DomainServiceListRequest]) (*connect_go.Response[v1.DomainServiceListResponse], error)
	Get(context.Context, *connect_go.Request[v1.DomainServiceGetRequest]) (*connect_go.Response[v1.DomainServiceGetResponse], error)
	Create(context.Context, *connect_go.Request[v1.DomainServiceCreateRequest]) (*connect_go.Response[v1.DomainServiceCreateResponse], error)
	Update(context.Context, *connect_go.Request[v1.DomainServiceUpdateRequest]) (*connect_go.Response[v1.DomainServiceUpdateResponse], error)
	Delete(context.Context, *connect_go.Request[v1.DomainServiceDeleteRequest]) (*connect_go.Response[v1.DomainServiceDeleteResponse], error)
}

// NewDomainServiceClient constructs a client for the api.v1.DomainService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDomainServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DomainServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &domainServiceClient{
		list: connect_go.NewClient[v1.DomainServiceListRequest, v1.DomainServiceListResponse](
			httpClient,
			baseURL+"/api.v1.DomainService/List",
			opts...,
		),
		get: connect_go.NewClient[v1.DomainServiceGetRequest, v1.DomainServiceGetResponse](
			httpClient,
			baseURL+"/api.v1.DomainService/Get",
			opts...,
		),
		create: connect_go.NewClient[v1.DomainServiceCreateRequest, v1.DomainServiceCreateResponse](
			httpClient,
			baseURL+"/api.v1.DomainService/Create",
			opts...,
		),
		update: connect_go.NewClient[v1.DomainServiceUpdateRequest, v1.DomainServiceUpdateResponse](
			httpClient,
			baseURL+"/api.v1.DomainService/Update",
			opts...,
		),
		delete: connect_go.NewClient[v1.DomainServiceDeleteRequest, v1.DomainServiceDeleteResponse](
			httpClient,
			baseURL+"/api.v1.DomainService/Delete",
			opts...,
		),
	}
}

// domainServiceClient implements DomainServiceClient.
type domainServiceClient struct {
	list   *connect_go.Client[v1.DomainServiceListRequest, v1.DomainServiceListResponse]
	get    *connect_go.Client[v1.DomainServiceGetRequest, v1.DomainServiceGetResponse]
	create *connect_go.Client[v1.DomainServiceCreateRequest, v1.DomainServiceCreateResponse]
	update *connect_go.Client[v1.DomainServiceUpdateRequest, v1.DomainServiceUpdateResponse]
	delete *connect_go.Client[v1.DomainServiceDeleteRequest, v1.DomainServiceDeleteResponse]
}

// List calls api.v1.DomainService.List.
func (c *domainServiceClient) List(ctx context.Context, req *connect_go.Request[v1.DomainServiceListRequest]) (*connect_go.Response[v1.DomainServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Get calls api.v1.DomainService.Get.
func (c *domainServiceClient) Get(ctx context.Context, req *connect_go.Request[v1.DomainServiceGetRequest]) (*connect_go.Response[v1.DomainServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Create calls api.v1.DomainService.Create.
func (c *domainServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.DomainServiceCreateRequest]) (*connect_go.Response[v1.DomainServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls api.v1.DomainService.Update.
func (c *domainServiceClient) Update(ctx context.Context, req *connect_go.Request[v1.DomainServiceUpdateRequest]) (*connect_go.Response[v1.DomainServiceUpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls api.v1.DomainService.Delete.
func (c *domainServiceClient) Delete(ctx context.Context, req *connect_go.Request[v1.DomainServiceDeleteRequest]) (*connect_go.Response[v1.DomainServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// DomainServiceHandler is an implementation of the api.v1.DomainService service.
type DomainServiceHandler interface {
	List(context.Context, *connect_go.Request[v1.DomainServiceListRequest]) (*connect_go.Response[v1.DomainServiceListResponse], error)
	Get(context.Context, *connect_go.Request[v1.DomainServiceGetRequest]) (*connect_go.Response[v1.DomainServiceGetResponse], error)
	Create(context.Context, *connect_go.Request[v1.DomainServiceCreateRequest]) (*connect_go.Response[v1.DomainServiceCreateResponse], error)
	Update(context.Context, *connect_go.Request[v1.DomainServiceUpdateRequest]) (*connect_go.Response[v1.DomainServiceUpdateResponse], error)
	Delete(context.Context, *connect_go.Request[v1.DomainServiceDeleteRequest]) (*connect_go.Response[v1.DomainServiceDeleteResponse], error)
}

// NewDomainServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDomainServiceHandler(svc DomainServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.v1.DomainService/List", connect_go.NewUnaryHandler(
		"/api.v1.DomainService/List",
		svc.List,
		opts...,
	))
	mux.Handle("/api.v1.DomainService/Get", connect_go.NewUnaryHandler(
		"/api.v1.DomainService/Get",
		svc.Get,
		opts...,
	))
	mux.Handle("/api.v1.DomainService/Create", connect_go.NewUnaryHandler(
		"/api.v1.DomainService/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/api.v1.DomainService/Update", connect_go.NewUnaryHandler(
		"/api.v1.DomainService/Update",
		svc.Update,
		opts...,
	))
	mux.Handle("/api.v1.DomainService/Delete", connect_go.NewUnaryHandler(
		"/api.v1.DomainService/Delete",
		svc.Delete,
		opts...,
	))
	return "/api.v1.DomainService/", mux
}

// UnimplementedDomainServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDomainServiceHandler struct{}

func (UnimplementedDomainServiceHandler) List(context.Context, *connect_go.Request[v1.DomainServiceListRequest]) (*connect_go.Response[v1.DomainServiceListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.DomainService.List is not implemented"))
}

func (UnimplementedDomainServiceHandler) Get(context.Context, *connect_go.Request[v1.DomainServiceGetRequest]) (*connect_go.Response[v1.DomainServiceGetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.DomainService.Get is not implemented"))
}

func (UnimplementedDomainServiceHandler) Create(context.Context, *connect_go.Request[v1.DomainServiceCreateRequest]) (*connect_go.Response[v1.DomainServiceCreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.DomainService.Create is not implemented"))
}

func (UnimplementedDomainServiceHandler) Update(context.Context, *connect_go.Request[v1.DomainServiceUpdateRequest]) (*connect_go.Response[v1.DomainServiceUpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.DomainService.Update is not implemented"))
}

func (UnimplementedDomainServiceHandler) Delete(context.Context, *connect_go.Request[v1.DomainServiceDeleteRequest]) (*connect_go.Response[v1.DomainServiceDeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.DomainService.Delete is not implemented"))
}

// RecordServiceClient is a client for the api.v1.RecordService service.
type RecordServiceClient interface {
	List(context.Context, *connect_go.Request[v1.RecordServiceListRequest]) (*connect_go.Response[v1.RecordServiceListResponse], error)
	Delete(context.Context, *connect_go.Request[v1.RecordServiceDeleteRequest]) (*connect_go.Response[v1.RecordServiceDeleteResponse], error)
	Update(context.Context, *connect_go.Request[v1.RecordServiceUpdateRequest]) (*connect_go.Response[v1.RecordServiceUpdateResponse], error)
	Create(context.Context, *connect_go.Request[v1.RecordServiceCreateRequest]) (*connect_go.Response[v1.RecordServiceCreateResponse], error)
}

// NewRecordServiceClient constructs a client for the api.v1.RecordService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRecordServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RecordServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &recordServiceClient{
		list: connect_go.NewClient[v1.RecordServiceListRequest, v1.RecordServiceListResponse](
			httpClient,
			baseURL+"/api.v1.RecordService/List",
			opts...,
		),
		delete: connect_go.NewClient[v1.RecordServiceDeleteRequest, v1.RecordServiceDeleteResponse](
			httpClient,
			baseURL+"/api.v1.RecordService/Delete",
			opts...,
		),
		update: connect_go.NewClient[v1.RecordServiceUpdateRequest, v1.RecordServiceUpdateResponse](
			httpClient,
			baseURL+"/api.v1.RecordService/Update",
			opts...,
		),
		create: connect_go.NewClient[v1.RecordServiceCreateRequest, v1.RecordServiceCreateResponse](
			httpClient,
			baseURL+"/api.v1.RecordService/Create",
			opts...,
		),
	}
}

// recordServiceClient implements RecordServiceClient.
type recordServiceClient struct {
	list   *connect_go.Client[v1.RecordServiceListRequest, v1.RecordServiceListResponse]
	delete *connect_go.Client[v1.RecordServiceDeleteRequest, v1.RecordServiceDeleteResponse]
	update *connect_go.Client[v1.RecordServiceUpdateRequest, v1.RecordServiceUpdateResponse]
	create *connect_go.Client[v1.RecordServiceCreateRequest, v1.RecordServiceCreateResponse]
}

// List calls api.v1.RecordService.List.
func (c *recordServiceClient) List(ctx context.Context, req *connect_go.Request[v1.RecordServiceListRequest]) (*connect_go.Response[v1.RecordServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Delete calls api.v1.RecordService.Delete.
func (c *recordServiceClient) Delete(ctx context.Context, req *connect_go.Request[v1.RecordServiceDeleteRequest]) (*connect_go.Response[v1.RecordServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Update calls api.v1.RecordService.Update.
func (c *recordServiceClient) Update(ctx context.Context, req *connect_go.Request[v1.RecordServiceUpdateRequest]) (*connect_go.Response[v1.RecordServiceUpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Create calls api.v1.RecordService.Create.
func (c *recordServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.RecordServiceCreateRequest]) (*connect_go.Response[v1.RecordServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// RecordServiceHandler is an implementation of the api.v1.RecordService service.
type RecordServiceHandler interface {
	List(context.Context, *connect_go.Request[v1.RecordServiceListRequest]) (*connect_go.Response[v1.RecordServiceListResponse], error)
	Delete(context.Context, *connect_go.Request[v1.RecordServiceDeleteRequest]) (*connect_go.Response[v1.RecordServiceDeleteResponse], error)
	Update(context.Context, *connect_go.Request[v1.RecordServiceUpdateRequest]) (*connect_go.Response[v1.RecordServiceUpdateResponse], error)
	Create(context.Context, *connect_go.Request[v1.RecordServiceCreateRequest]) (*connect_go.Response[v1.RecordServiceCreateResponse], error)
}

// NewRecordServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRecordServiceHandler(svc RecordServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.v1.RecordService/List", connect_go.NewUnaryHandler(
		"/api.v1.RecordService/List",
		svc.List,
		opts...,
	))
	mux.Handle("/api.v1.RecordService/Delete", connect_go.NewUnaryHandler(
		"/api.v1.RecordService/Delete",
		svc.Delete,
		opts...,
	))
	mux.Handle("/api.v1.RecordService/Update", connect_go.NewUnaryHandler(
		"/api.v1.RecordService/Update",
		svc.Update,
		opts...,
	))
	mux.Handle("/api.v1.RecordService/Create", connect_go.NewUnaryHandler(
		"/api.v1.RecordService/Create",
		svc.Create,
		opts...,
	))
	return "/api.v1.RecordService/", mux
}

// UnimplementedRecordServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRecordServiceHandler struct{}

func (UnimplementedRecordServiceHandler) List(context.Context, *connect_go.Request[v1.RecordServiceListRequest]) (*connect_go.Response[v1.RecordServiceListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.RecordService.List is not implemented"))
}

func (UnimplementedRecordServiceHandler) Delete(context.Context, *connect_go.Request[v1.RecordServiceDeleteRequest]) (*connect_go.Response[v1.RecordServiceDeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.RecordService.Delete is not implemented"))
}

func (UnimplementedRecordServiceHandler) Update(context.Context, *connect_go.Request[v1.RecordServiceUpdateRequest]) (*connect_go.Response[v1.RecordServiceUpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.RecordService.Update is not implemented"))
}

func (UnimplementedRecordServiceHandler) Create(context.Context, *connect_go.Request[v1.RecordServiceCreateRequest]) (*connect_go.Response[v1.RecordServiceCreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.RecordService.Create is not implemented"))
}
